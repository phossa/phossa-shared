<?php
namespace Phossa\Shared\Message;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-19 at 06:14:33.
 */
class MessageAbstractTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Loader\LoaderInterface
     */
    protected $loader = null;

    /**
     * @var Formatter\FormatterInterface
     */
    protected $formatter = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require_once __DIR__ . '/Message.php';
        require_once __DIR__ . '/NewMessage.php';

        // create loader
        $this->loader = new Loader\LanguageLoader('zh_CN');

        // formatter
        $this->formatter = new Formatter\HtmlFormatter();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::get
     */
    public function testGet()
    {
        // simple get
        $this->assertEquals(
            'Test "x" not found', Message::get(Message::TEST_NOT_FOUND, 'x')
        );

        // subclass get parent's code
        $this->assertEquals(
            'Test "y" not found', NewMessage::get(NewMessage::TEST_NOT_FOUND, 'y')
        );

        // subclass get own code
        $this->assertEquals(
            'Person "z" not found', NewMessage::get(NewMessage::PERSON_NOT_FOUND, 'z')
        );

        // set language loader
        Message::setLoader($this->loader);

        $this->assertEquals(
            'Test "x" found', Message::get(Message::TEST_NOT_FOUND, 'x')
        );

        // subclass get parent's code
        $this->assertEquals(
            'Test "y" found', NewMessage::get(NewMessage::TEST_NOT_FOUND, 'y')
        );

        // subclass get own code
        $this->assertEquals(
            'Person "z" found', NewMessage::get(NewMessage::PERSON_NOT_FOUND, 'z')
        );
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::setLoader
     */
    public function testSetLoader()
    {
        Message::setLoader($this->loader);
        $this->assertTrue($this->loader === Message::getLoader());
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::unsetLoader
     * @expectedException Phossa\Shared\Exception\NotFoundException
     */
    public function testUnsetLoader()
    {
        Message::unsetLoader();
        Message::getLoader();
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::getLoader
     * @expectedException Phossa\Shared\Exception\NotFoundException
     */
    public function testGetLoader()
    {
        Message::setLoader($this->loader);
        $this->assertTrue($this->loader === Message::getLoader());

        Message::unsetLoader();
        Message::getLoader();
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::hasLoader
     */
    public function testHasLoader()
    {
        Message::unsetLoader();
        $this->assertTrue(false === Message::hasLoader(false));

        Message::setLoader($this->loader);
        $this->assertTrue(false !== Message::hasLoader(false));

        $this->assertTrue(false !== NewMessage::hasLoader(true));

        $this->assertTrue(false === NewMessage::hasLoader(false));
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::unsetTheLoader
     */
    public function testUnsetTheLoader()
    {
        Message::setLoader($this->loader);
        NewMessage::setLoader($this->loader);

        Message::unsetTheLoader($this->loader);
        $this->assertTrue(false === Message::hasLoader(false));
        $this->assertTrue(false === NewMessage::hasLoader(false));
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::getLoaders
     */
    public function testGetLoaders()
    {
        Message::setLoader($this->loader);
        NewMessage::setLoader($this->loader);
        $this->assertTrue(2 === count(Message::getLoaders()));
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::setMappings
     */
    public function testSetMappings()
    {
        Message::setMappings([17 => 'test']);
        $this->assertArrayHasKey(17, Message::getMappings());
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::hasMappings
     */
    public function testHasMappings()
    {
        Message::setMappings([17 => 'test']);
        $this->assertTrue(Message::hasMappings());
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::getMappings
     */
    public function testGetMappings()
    {
        Message::resetMappings();
        $this->assertTrue(1 === count(Message::getMappings()));
        Message::setMappings([17 => 'test']);
        $this->assertTrue(2 === count(Message::getMappings()));
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::resetMappings
     */
    public function testResetMappings()
    {
        Message::setMappings([17 => 'test']);
        $this->assertTrue(Message::hasMappings());
        Message::resetMappings();
        $this->assertTrue(Message::hasMappings() === false);
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::hasMessage
     */
    public function testHasMessage()
    {
        Message::setMappings([17 => 'test']);
        $this->assertTrue(Message::hasMessage(Message::TEST_NOT_FOUND));
        $this->assertTrue(false === Message::hasMessage(17));
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::getMessage
     */
    public function testGetMessage()
    {
        $this->assertTrue(
            'Test "%s" not found' ==
            Message::getMessage(Message::TEST_NOT_FOUND)
        );
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::setFormatter
     */
    public function testSetFormatter()
    {
        Message::setFormatter($this->formatter);
        $this->assertTrue($this->formatter === Message::getFormatter());
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::unsetFormatter
     * @expectedException Phossa\Shared\Exception\NotFoundException
     */
    public function testUnsetFormatter()
    {
        Message::setFormatter($this->formatter);
        Message::unsetFormatter();
        Message::getFormatter();
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::getFormatter
     */
    public function testGetFormatter()
    {
        Message::setFormatter($this->formatter);
        $this->assertTrue($this->formatter === NewMessage::getFormatter());
    }

    /**
     * @covers Phossa\Shared\Message\MessageAbstract::hasFormatter
     */
    public function testHasFormatter()
    {
        Message::setFormatter($this->formatter);
        $this->assertTrue(NewMessage::hasFormatter());
        Message::unsetFormatter();
        $this->assertTrue(NewMessage::hasFormatter() === false);
    }
}
